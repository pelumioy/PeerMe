{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\pelum\\\\Desktop\\\\projects\\\\PeerMe\\\\app\\\\components\\\\AppPicker.js\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport defaultStyles from \"../config/styles\";\nimport AppText from \"./AppText\";\nimport Screen from \"./Screen\";\nimport PickerItem from \"./PickerItem\";\nimport colors from \"../config/colors\";\n\nfunction AppPicker(_ref) {\n  var _this = this;\n\n  var placeholder = _ref.placeholder,\n      onSelectItem = _ref.onSelectItem,\n      selectedItem = _ref.selectedItem,\n      items = _ref.items,\n      icon = _ref.icon,\n      otherProps = _objectWithoutProperties(_ref, [\"placeholder\", \"onSelectItem\", \"selectedItem\", \"items\", \"icon\"]);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      return setModalVisible(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, icon && React.createElement(MaterialCommunityIcons, {\n    name: icon,\n    size: 23,\n    color: defaultStyles.colors.medium,\n    style: styles.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }), selectedItem ? React.createElement(AppText, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 29\n    }\n  }, selectedItem.label) : React.createElement(AppText, {\n    style: {\n      color: colors.medium\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 89\n    }\n  }, placeholder), React.createElement(MaterialCommunityIcons, {\n    name: \"chevron-down\",\n    size: 23,\n    color: defaultStyles.colors.medium,\n    style: styles.iconn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }))), React.createElement(Modal, {\n    visible: modalVisible,\n    animationType: \"slide\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, React.createElement(Screen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    title: \"close\",\n    onPress: function onPress() {\n      return setModalVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }), React.createElement(FlatList, {\n    data: items,\n    keyExtractor: function keyExtractor(item) {\n      return item.value.toString();\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(PickerItem, {\n        label: item.label,\n        onPress: function onPress() {\n          setModalVisible(false);\n          onSelectItem(item);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: defaultStyles.colors.light,\n    borderRadius: 25,\n    flexDirection: \"row\",\n    width: \"100%\",\n    padding: 15,\n    marginVertical: 10\n  },\n  icon: {\n    marginRight: 10\n  },\n  iconn: {\n    marginRight: 10\n  }\n});\nexport default AppPicker;","map":{"version":3,"sources":["C:/Users/pelum/Desktop/projects/PeerMe/app/components/AppPicker.js"],"names":["React","useState","MaterialCommunityIcons","defaultStyles","AppText","Screen","PickerItem","colors","AppPicker","placeholder","onSelectItem","selectedItem","items","icon","otherProps","modalVisible","setModalVisible","styles","container","medium","flex","label","color","iconn","item","value","toString","StyleSheet","create","backgroundColor","light","borderRadius","flexDirection","width","padding","marginVertical","marginRight"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport { View, TextInput, StyleSheet, TouchableWithoutFeedback, Modal, Button, FlatList } from \"react-native\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\n\nimport defaultStyles from \"../config/styles\";\nimport AppText from \"./AppText\";\nimport Screen from \"./Screen\";\nimport PickerItem from \"./PickerItem\";\nimport colors from \"../config/colors\";\n\nfunction AppPicker({ placeholder, onSelectItem, selectedItem, items, icon, ...otherProps }) {\nconst [modalVisible, setModalVisible] = useState(false)\n  return (\n    <>\n    <TouchableWithoutFeedback onPress={() => setModalVisible(true)}>\n        <View style={styles.container}>\n        {icon && (\n            <MaterialCommunityIcons\n            name={icon}\n            size={23}\n            color={defaultStyles.colors.medium}\n            style={styles.icon}\n            />\n        )}\n            {selectedItem ? <AppText style={{flex: 1}}>{selectedItem.label}</AppText> : <AppText style={{color: colors.medium}}>{placeholder}</AppText>}\n            <MaterialCommunityIcons\n            name= 'chevron-down'\n            size={23}\n            color={defaultStyles.colors.medium}\n            style={styles.iconn}\n            />\n        </View>\n    </TouchableWithoutFeedback>\n    <Modal visible={modalVisible} animationType='slide'>\n        <Screen>\n            <Button title='close' onPress={() => setModalVisible(false)}/>\n            <FlatList \n                data={items}\n                keyExtractor={item => item.value.toString()}\n                renderItem={({item}) => \n                    <PickerItem\n                        label={item.label}\n                        onPress={() => {\n                          setModalVisible(false)\n                          onSelectItem(item)\n                        }\n                        }/>}\n                />\n        </Screen>\n    </Modal>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: defaultStyles.colors.light,\n    borderRadius: 25,\n    flexDirection: \"row\",\n    width: \"100%\",\n    padding: 15,\n    marginVertical: 10,\n  },\n  icon: {\n    marginRight: 10,\n  },\n  iconn: {\n    marginRight: 10,\n  },\n});\n\nexport default AppPicker;\n"]},"metadata":{},"sourceType":"module"}